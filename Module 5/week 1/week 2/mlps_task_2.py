# -*- coding: utf-8 -*-
"""MLPs task 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HVYdEYsBzZGlr0HwWWS87nEmarf5zf-V
"""

# Download dataset
!gdown --id 1SqSn_8rxkk-Qvu4JLMcN_3ZFGDNa6P_V

# Load and preprocess
data = np.load('NonLinear_data.npy', allow_pickle=True).item()
X, y = data['X'], data['labels']

# Split and normalize
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=random_state)
X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.125, random_state=random_state)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_val = scaler.transform(X_val)
X_test = scaler.transform(X_test)

X_train = torch.tensor(X_train, dtype=torch.float32)
X_val = torch.tensor(X_val, dtype=torch.float32)
X_test = torch.tensor(X_test, dtype=torch.float32)
y_train = torch.tensor(y_train, dtype=torch.long)
y_val = torch.tensor(y_val, dtype=torch.long)
y_test = torch.tensor(y_test, dtype=torch.long)

# Define the model
class MLPClassification(nn.Module):
    def __init__(self, input_size, hidden_size, num_classes):
        super(MLPClassification, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.out = nn.Linear(hidden_size, num_classes)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        return self.out(x)

input_size = X_train.shape[1]
num_classes = len(np.unique(y_train))
model = MLPClassification(input_size, 128, num_classes)

# Loss and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.1)

# Training loop
epochs = 100
for epoch in range(epochs):
    model.train()
    optimizer.zero_grad()
    y_pred = model(X_train)
    loss = criterion(y_pred, y_train)
    loss.backward()
    optimizer.step()

    # Validation phase
    model.eval()
    with torch.no_grad():
        y_val_pred = model(X_val)
        val_loss = criterion(y_val_pred, y_val)

    print(f"Epoch {epoch+1}, Train Loss: {loss.item()}, Validation Loss: {val_loss.item()}")